import * as xlsx from "xlsx";

type OperationType = "–ø—Ä–∏—Ö–æ–¥" | "–≤—ñ–¥—Ö–æ–¥";

/**
 * –í—Å—Ç–∞–≤–ª—è—î –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑ –º–∞–ø–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∞—Ä–∫—É—à –∫–Ω–∏–≥–∏ Excel, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ä—è–¥–∫–∞ 4 —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
 * @param workbook –í—ñ–¥–∫—Ä–∏—Ç–∏–π Excel-—Ñ–∞–π–ª (xlsx.readFile(...))
 * @param dataMap –ú–∞–ø–∞: –∫–æ–¥ => –∫—ñ–ª—å–∫—ñ—Å—Ç—å
 * @param operation "–ø—Ä–∏—Ö–æ–¥" –∞–±–æ "–≤—ñ–¥—Ö–æ–¥" ‚Äî –æ–±–∏—Ä–∞—î –∞—Ä–∫—É—à
 * @param columnLetter –ù–∞–ø—Ä–∏–∫–ª–∞–¥ "C", "D" ‚Äî –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–∫–∏ (—Ä—è–¥–æ–∫ –∑–∞–≤–∂–¥–∏ –∑ 4)
 */
export function writeToTemplate(
  workbook: xlsx.WorkBook,
  dataMap: Map<string, number>,
  operation: OperationType,
  columnLetter: string
): void {
  const sheetName = operation === "–ø—Ä–∏—Ö–æ–¥" ? "–ù–ê–î–Ü–ô–®–õ–û" : "–í–ò–ë–£–õ–û";
  const worksheet = workbook.Sheets[sheetName];

  console.log("‚û° –í—Å—Ç–∞–≤–∫–∞ –≤ –∞—Ä–∫—É—à:", sheetName);
  console.log("üßæ –ö–æ–ª–æ–Ω–∫–∞:", columnLetter);
  console.log("üóÇÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:", dataMap.size);

  if (!worksheet) {
    throw new Error(`–ê—Ä–∫—É—à "${sheetName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Excel-—Ñ–∞–π–ª—ñ.`);
  }

  let row = 4; // –∑–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ 4-–≥–æ —Ä—è–¥–∫–∞

  for (const [, quantity] of dataMap) {
    const cell = `${columnLetter}${row}`;
    console.log("‚û° –í—Å—Ç–∞–≤–∫–∞ —É –∫–ª—ñ—Ç–∏–Ω–∫—É:", cell);
    console.log("‚û° –ó–Ω–∞—á–µ–Ω–Ω—è:", quantity);
    xlsx.utils.sheet_add_aoa(worksheet, [[quantity]], {origin: cell});
    row++;
  }

//   –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–∂—ñ –∞—Ä–∫—É—à–∞ (!ref), —â–æ–± –∑–º—ñ–Ω–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–∏—Å—å
  const range = xlsx.utils.decode_range(worksheet["!ref"] || `${columnLetter}4:${columnLetter}${row}`);
  range.e.r = Math.max(range.e.r, row);
  worksheet["!ref"] = xlsx.utils.encode_range(range);
  
}